// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7MVt3GGiLjEj9v54NKoHwR
// Component: NJWp35s7nBdu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: 6hwPnp28x1ML/component
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_copy_of_supabase_auth.module.css"; // plasmic-import: 7MVt3GGiLjEj9v54NKoHwR/projectcss
import sty from "./PlasmicSsr.module.css"; // plasmic-import: NJWp35s7nBdu/css

createPlasmicElementProxy;

export type PlasmicSsr__VariantMembers = {};
export type PlasmicSsr__VariantsArgs = {};
type VariantPropType = keyof PlasmicSsr__VariantsArgs;
export const PlasmicSsr__VariantProps = new Array<VariantPropType>();

export type PlasmicSsr__ArgsType = {};
type ArgPropType = keyof PlasmicSsr__ArgsType;
export const PlasmicSsr__ArgProps = new Array<ArgPropType>();

export type PlasmicSsr__OverridesType = {
  root?: p.Flex<"div">;
  pageLayout?: p.Flex<typeof PageLayout>;
  section?: p.Flex<"section">;
  h3?: p.Flex<"h3">;
  checkbox?: p.Flex<typeof AntdCheckbox>;
  form?: p.Flex<typeof FormWrapper>;
  textArea?: p.Flex<typeof AntdTextArea>;
  button?: p.Flex<typeof AntdButton>;
};

export interface DefaultSsrProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSsr__RenderFunc(props: {
  variants: PlasmicSsr__VariantsArgs;
  args: PlasmicSsr__ArgsType;
  overrides: PlasmicSsr__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "checkbox[].checked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: p.generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    todos: usePlasmicDataOp(() => {
      return {
        sourceId: "5LLta6EL4HV3x2Hq4hx76S",
        opId: "f931bf25-5c22-457d-9e5f-1fc4d4a329e3",
        userArgs: {},
        cacheKey: `plasmic.$.f931bf25-5c22-457d-9e5f-1fc4d4a329e3.$.`,
        invalidatedKeys: null,
        roleId: "752baa42-c0c5-4b7e-aedd-fbc83e624cb7"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nGPe)}
                  >
                    <h3
                      data-plasmic-name={"h3"}
                      data-plasmic-override={overrides.h3}
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3
                      )}
                    >
                      {"Todo list"}
                    </h3>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.todos.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const todo = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___33Dn3
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rcygF
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return todo.description;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            const child$Props = {
                              checked: p.generateStateValueProp($state, [
                                "checkbox",
                                __plasmic_idx_0,
                                "checked"
                              ]),
                              className: classNames(
                                "__wab_instance",
                                sty.checkbox
                              ),
                              defaultChecked: (() => {
                                try {
                                  return todo.done;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              onChange: p.generateStateOnChangeProp($state, [
                                "checkbox",
                                __plasmic_idx_0,
                                "checked"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "checked",
                                  plasmicStateName: "checkbox[].checked"
                                }
                              ],
                              [__plasmic_idx_0],
                              undefined ?? {},
                              child$Props
                            );
                            p.initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "checkbox[].checked",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return todo.done;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <AntdCheckbox
                                data-plasmic-name={"checkbox"}
                                data-plasmic-override={overrides.checkbox}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xbt4J
                                  )}
                                >
                                  {"Done"}
                                </div>
                              </AntdCheckbox>
                            );
                          })()}
                        </div>
                      );
                    })}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4DeP)}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.form),
                        extendedOnValuesChange:
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form", "value"],
                            FormWrapper_Helpers
                          ),
                        formItems: undefined,
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: undefined,
                        onIsSubmittingChange:
                          p.generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form", "isSubmitting"],
                            FormWrapper_Helpers
                          ),
                        ref: ref => {
                          $refs["form"] = ref;
                        },
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      p.initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form"}
                          data-plasmic-override={overrides.form}
                          {...child$Props}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField___6Ti39
                            )}
                            label={"Description"}
                            name={"description"}
                          >
                            <AntdTextArea
                              className={classNames(
                                "__wab_instance",
                                sty.textArea
                              )}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            children={null}
                            className={classNames(
                              "__wab_instance",
                              sty.formField__o9OU
                            )}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__h9R8P
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            name={"done"}
                            noLabel={true}
                          />

                          <AntdButton
                            className={classNames("__wab_instance", sty.button)}
                            onClick={async () => {
                              const $steps = {};

                              $steps["tutorialdbCreate"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "5LLta6EL4HV3x2Hq4hx76S",
                                        opId: "600edb45-1f8f-42bc-a27f-342892f90d3d",
                                        userArgs: {
                                          variables: [
                                            $state.form.value.description
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId:
                                          "752baa42-c0c5-4b7e-aedd-fbc83e624cb7"
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["tutorialdbCreate"] != null &&
                                typeof $steps["tutorialdbCreate"] ===
                                  "object" &&
                                typeof $steps["tutorialdbCreate"].then ===
                                  "function"
                              ) {
                                $steps["tutorialdbCreate"] = await $steps[
                                  "tutorialdbCreate"
                                ];
                              }
                            }}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hR8Uz
                              )}
                            >
                              {"Create new todo"}
                            </div>
                          </AntdButton>
                        </FormWrapper>
                      );
                    })()}
                  </div>
                </section>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h3",
    "checkbox",
    "form",
    "textArea",
    "button"
  ],
  pageLayout: [
    "pageLayout",
    "section",
    "h3",
    "checkbox",
    "form",
    "textArea",
    "button"
  ],
  section: ["section", "h3", "checkbox", "form", "textArea", "button"],
  h3: ["h3"],
  checkbox: ["checkbox"],
  form: ["form", "textArea", "button"],
  textArea: ["textArea"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  h3: "h3";
  checkbox: typeof AntdCheckbox;
  form: typeof FormWrapper;
  textArea: typeof AntdTextArea;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSsr__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSsr__VariantsArgs;
    args?: PlasmicSsr__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSsr__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSsr__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSsr__ArgProps,
          internalVariantPropNames: PlasmicSsr__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSsr__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSsr";
  } else {
    func.displayName = `PlasmicSsr.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={"752baa42-c0c5-4b7e-aedd-fbc83e624cb7"}
      appId={"7MVt3GGiLjEj9v54NKoHwR"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

export const PlasmicSsr = Object.assign(
  // Top-level PlasmicSsr renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h3: makeNodeComponent("h3"),
    checkbox: makeNodeComponent("checkbox"),
    form: makeNodeComponent("form"),
    textArea: makeNodeComponent("textArea"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicSsr
    internalVariantProps: PlasmicSsr__VariantProps,
    internalArgProps: PlasmicSsr__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSsr;
/* prettier-ignore-end */
